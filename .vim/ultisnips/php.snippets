global !p
from php import *
endglobal

snippet try "try { } catch () { } finally { }"
try {
	${1:// code}
} catch (${VISUAL}${2:Exception} $${3:e}) {
	${4:// code}
}${5: finally {
	${6:// code}
}}
$0
endsnippet


snippet do "do"
do {
	${2:// code}
} while (${1:/* condition */});
$0
endsnippet


snippet while "while ( ) { }"
while (${1:/* condition */}) {
	${2:// code}
}$0
endsnippet


snippet for "for"
for ($$1 = 0; $${1:i} < ${2:count}; $$1${3:++}) {
	${4:// code}
}
endsnippet


snippet if "if ( ) { }"
if (${1:/* condition */}) {
	${2:// code}
}$0
endsnippet


snippet el "else { }"
else {
	${1:// code}
}
$0
endsnippet


snippet elif "else if ( ) { }"
elseif (${1:/* condition */}) {
	${2:// code}
}$0
endsnippet


snippet fe "foreach"
foreach ($${1:var} as $${2:${3:k}${4: => $${5:v}}}) {
	${6:// code}
}
$0
endsnippet


snippet t "" w
$this->
endsnippet


snippet cl "class"
class ${1:`!p snip.rv=get_class_name_with_underscored_namespaces()`}$2
{
	$3
}
endsnippet


snippet "((protected|public|private) \$([\w.]+).*pg)" "protected getter" rm
`!p
_line = match.group(1)[:-2]
_cid = get_camelcase_identifier_from_string(_line, False)
_id = get_identifier_from_string(_line, False)
_phpdoc = get_phpdoc_variables_before_cursor()
_var = ''
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0

/**
 * Возвращает @see `!p snip.rv=_id`
 *
 * @return ${2:`!p snip.rv=_var`}
 */
protected function _get`!p snip.rv=_cid`()
{
    return $this->`!p snip.rv=_id`;
}
endsnippet


snippet @p "@param inside doc-block comment"
@param ${1:type} $${2:var}${3: ${4:description}}
endsnippet


snippet @r "@return inside doc-block comment"
@return ${1:type}${3: ${4:description}}
endsnippet


snippet fn "public function with doc-block comment"
/**
 * ${30:Short Description}${31:
 *
 * ${32:Long Description}}${33:
 *
 * @param ${34:type} $${35:var} ${36:description}}${60:
 * @return ${61:type} ${62:description}}
 */
public function ${1:functionName}(${2:args})
{
	${99:// code}$0
}
endsnippet


snippet fnp "protected function with doc-block comment"
/**
 * ${30:Short Description}${31:
 *
 * ${32:Long Description}}${33:
 *
 * @param ${34:type} $${35:var} ${36:description}}${60:
 * @return ${61:type} ${62:description}}
 */
protected function _${1:functionName}(${2:args})
{
	${99:// code}$0
}
endsnippet


snippet fnpp "private function with doc-block comment"
/**
 * ${30:Short Description}${31:
 *
 * ${32:Long Description}}${33:
 *
 * @param ${34:type} $${35:var} ${36:description}}${60:
 * @return ${61:type} ${62:description}}
 */
private function _${1:functionName}(${2:args})
{
	${99:// code}$0
}
endsnippet


snippet var "public class variable with doc-block comment"
/**${30:
 * ${31:description}
 *}
 * @var ${4:type}
 */
public $${1:var}${2: = ${3:value}};$0
endsnippet


snippet varp "protected class variable with doc-block comment"
/**${30:
 * ${31:description}
 *}
 * @var ${4:type}
 */
protected $_${1:var}${2: = ${3:value}};$0
endsnippet


snippet varpp "private class variable with doc-block comment"
/**${30:
 * ${31:description}
 *}
 * @var ${4:type}
 */
private $_${1:var}${2: = ${3:value}};$0
endsnippet


# Debug

snippet ve "var_export with newline"
echo '${1:expr} ' . var_export($1, true) . PHP_EOL;
endsnippet


snippet ves "usual var_export"
var_export(${1:var});
endsnippet


snippet ved "var_export with newline and die"
echo '${1:expr} ' . var_export($1, true) . PHP_EOL;
die('abort');
endsnippet


snippet @const "class constant"
/**${2:
 * ${3:Description}}
 * @const ${1:Label}
 */$0
endsnippet


snippet const "class constant"
/**${3:
 * ${4:Description}}
 * @const $1
 */
const ${1:NAME} = ${2:VALUE};$0
endsnippet


snippet e "echo with PHP_EOL"
echo '$0' . PHP_EOL;
endsnippet
