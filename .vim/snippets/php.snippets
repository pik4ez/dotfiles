# Common language constructs

snippet try "try { } catch () { } finally { }"
try {
	${1:// code}
} catch (${VISUAL}${2:Exception} $${3:e}) {
	${4:// code}
}${5: finally {
	${6:// code}
}}
$0
endsnippet


snippet do "do"
do {
	${2:// code}
} while (${1:/* condition */});
$0
endsnippet


snippet while "while ( ) { }"
while (${1:/* condition */}) {
	${2:// code}
}
$0
endsnippet


# todo make more for's or make this snippet more flexible (= 0, <)
snippet for "for"
for ($$1 = 0; $${1:i} < ${2:count}; $$1${3:++}) {
	${4:// code}
}
endsnippet


snippet if "if ( ) { }"
if (${1:/* condition */}) {
	${2:// code}
}$0
endsnippet


snippet el "else { }"
else {
	${1:// code}
}
$0
endsnippet


snippet elif "else if ( ) { }"
elseif (${1:/* condition */}) {
	${2:// code}
}$0
endsnippet


snippet fe "foreach"
foreach ($${1:var} as $${2:${3:k}${4: => $${5:v}}}) {
	${6:// code}
}
$0
endsnippet


# Classes, interfaces, functions

snippet t "" !
$this->
endsnippet


snippet class "class with doc-block comment" !b
/**
 * ${6:Short Description}${7:
 *
 * ${8:Long Description}}${9:
 *
 * @category    ${10:Category}
 * @package     ${11:Category_Package}
 * @author      Dmitry Khasanov <d.khasanov@office.ngs.ru>
 * @copyright   2014 Ngs}
 */
class ${1:ClassName}${2: extends ${3:BaseClass}}${4: implements ${5:Interface}}
{
	${12:// code}$0
}
endsnippet


snippet aclass "abstract class with doc-block comment" b
/**
 * ${6:Short Description}${7:
 *
 * ${8:Long Description}}${9:
 *
 * @abstract
 * @category    ${10:Category}
 * @package     ${11:Category_Package}
 * @author      Dmitry Khasanov <d.khasanov@office.ngs.ru>
 * @copyright   2014 Ngs}
 */
abstract class ${1:ClassName}${2: extends ${3:BaseClass}}${4: implements ${5:Interface}}
{
	${12:// code}$0
}
endsnippet


snippet iface "interface with doc-block comment" b
/**
 * ${4:Short Description}${5:
 *
 * ${6:Long Description}}${7:
 *
 * @category    ${8:Category}
 * @package     ${9:Category_Package}
 * @author      Dmitry Khasanov <d.khasanov@office.ngs.ru>
 * @copyright   2014 Ngs}
 */
interface ${1:ClassName}${2: extends ${3:BaseInterface}}
{
	${10:// code}$0
}
endsnippet


snippet @c "doc-block comment for class of interface"
/**
 * ${1:Short Description}${2:
 *
 * ${3:Long Description}}${4:
 *
 * @category    ${5:Category}
 * @package     ${6:Category_Package}
 * @author      Dmitry Khasanov <d.khasanov@office.ngs.ru>
 * @copyright   2014 Ngs}
 */
endsnippet


snippet @f "doc-block comment for class method"
/**
 * ${1:Short Description}${2:
 *
 * ${3:Long Description}}${4:
 *
 * @param ${5:type} $${6:var} ${7:description}}${8:
 * @return ${9:type} ${10:description}}
 */$0
endsnippet


snippet @v "doc-block comment for class variable"
/**
 * ${3:Short Description}${4:
 *
 * ${5:Long Description}}
 *
 * @var ${1:type}
 */$0
endsnippet


snippet @p "@param inside doc-block comment"
@param ${1:type} $${2:var}${3: ${4:description}}
endsnippet


snippet @r "@return inside doc-block comment"
@return ${1:type}${3: ${4:description}}
endsnippet


snippet fn "public function with doc-block comment"
/**
 * ${30:Short Description}${31:
 *
 * ${32:Long Description}}${33:
 *
 * @param ${34:type} $${35:var} ${36:description}}${60:
 * @return ${61:type} ${62:description}}
 */
public function ${1:functionName}(${2:args})
{
	${99:// code}$0
}
endsnippet


snippet fnp "protected function with doc-block comment"
/**
 * ${30:Short Description}${31:
 *
 * ${32:Long Description}}${33:
 *
 * @param ${34:type} $${35:var} ${36:description}}${60:
 * @return ${61:type} ${62:description}}
 */
protected function _${1:functionName}(${2:args})
{
	${99:// code}$0
}
endsnippet


snippet fnpp "private function with doc-block comment"
/**
 * ${30:Short Description}${31:
 *
 * ${32:Long Description}}${33:
 *
 * @param ${34:type} $${35:var} ${36:description}}${60:
 * @return ${61:type} ${62:description}}
 */
private function _${1:functionName}(${2:args})
{
	${99:// code}$0
}
endsnippet


snippet var "public class variable with doc-block comment"
/** @var $2 ${30: ${31:description}} */
public ${1:${2:type} }$${3:var}${4: = ${5:value}};
$0
endsnippet


snippet varp "protected class variable with doc-block comment"
/** @var $2 ${30: ${31:description}} */
protected ${1:${2:type} }$_${3:var}${4: = ${5:value}};
$0
endsnippet


snippet varpp "private class variable with doc-block comment"
/** @var $2 ${30: ${31:description}} */
private ${1:${2:type} }$_${3:var}${4: = ${5:value}};
$0
endsnippet


# Debug

snippet ve "echo $title . ' ' . var_export($var, true) . PHP_EOL;"
echo "${1:title}" . var_export($${2:var}, true) . PHP_EOL;
endsnippet


snippet ves "var_export($var);"
var_export($${1:var});
endsnippet


snippet ved "die(var_export($var));"
echo die(var_export($${1:var}));
endsnippet


snippet @const "class constant"
/**${2:
 * ${3:Description}}
 * @const ${1:Label}
 */$0
endsnippet


snippet const "class constant"
/**${3:
 * ${4:Description}}
 * @const $1
 */
const ${1:NAME} = ${2:VALUE};$0
endsnippet
